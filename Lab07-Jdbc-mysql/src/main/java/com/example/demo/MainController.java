package com.example.demo;
 
import java.util.*;  
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import java.lang.String;
@Controller // This means that this class is a Controller
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
@RequestMapping("/")
  public String userForm(Model model) {
   
	  List<User> users = (List<User>) userRepository.findAll();
	  model.addAttribute("users",users);
    return "index";
  }
  @GetMapping("/delete/{id}")
  public String deleteUser(@PathVariable("id") long id, Model model) {
      User user = userRepository.findById((int) id)
        .orElseThrow(() -> new IllegalArgumentException("Invalid user Id:" + id));
      userRepository.delete(user);
      return "redirect:/";
  }
  @PostMapping("/update/{id}")
  public String updateUser(@PathVariable("id") Integer id, @Validated  User user, 
    BindingResult result, Model model) {
     System.out.println(id); 
	 System.out.println(user.getId()+ user.getName());
	if (result.hasErrors()) {
          user.setId(id);
          return "update-user";
      }
          
      userRepository.save(user);
      return "redirect:/";
  }
  @GetMapping("/edit/{id}")
  public String showUpdateForm(@PathVariable("id") int id, Model model) {
      User user = userRepository.findById(id)
        .orElseThrow(() -> new IllegalArgumentException("Invalid user Id:" + id));
      
      model.addAttribute("user", user);
      return "update-user";
  }
   
  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
  
  @PostMapping("/register")
  public String addUser(@Validated User user, BindingResult result, Model model) {
      if (result.hasErrors()) {
          return "userForm";
      }
      
      userRepository.save(user);
      return "redirect:/";
  }
  @GetMapping("/register")
  public String showForm(Model model) {
      User user = new User();
      model.addAttribute("user", user);
      
      return "userForm";
  }
 
}